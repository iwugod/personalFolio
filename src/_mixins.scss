// responsive example, needs to be edited
$break-small: 768px;
$break-large: 768px;
$break-large-right: 1024px;
$break-large-right2: 1024px;
$break-huge: 1920px;
$break-height:900px;
$break-polytech: 940px;
$ipad-pro-portrait-breakpoint: "(min-device-width : 1024px) and (max-device-width : 1024px) and (min-device-height : 1366px) and (max-device-height : 1366px) and (min-width: 1024px) and (max-width: 1024px)";
$ipad-pro-landscape-breakpoint: "(min-device-width : 1024px) and (max-device-width : 1024px) and (min-device-height : 1366px) and (max-device-height : 1366px) and (min-width: 1366px) and (max-width: 1366px)";

@mixin bg-indent{
  display: block;
  text-indent: -9999px;
  white-space: nowrap;
  overflow: hidden;
}


// Responsive Mixins

@mixin respond-to($media) {
	@if $media == mobile {
		@media only screen and (max-width: $break-small) { @content; }
	}
	@if $media == mobile-portrait {
	  @media only screen and (max-width: $break-small) and (orientation:portrait) { @content; }
	}
    @if $media == mobile-landscape {
	  @media only screen and (max-width: $break-small) and (orientation:landscape) { @content; }
	}
    @if $media == ipad-pro-portrait {
      @media only screen and (min-device-width: 1024px) and (max-device-width : 1024px) and
      (min-device-height: 1366px) and (max-device-height: 1366px) and (min-width: 1024px) and (max-width: 1024px) and (orientation: portrait) { @content; }
    }
    @if $media == ipad-pro-landscape {
      @media only screen and (min-device-width: 1366px) and (max-device-width : 1366px) and
      (min-device-height: 1024px) and (max-device-height: 1024px) and (min-width: 1366px) and (max-width: 1366px) and (orientation: landscape) { @content; }
    }
	@else if $media == tablet {
		@media only screen and (min-width: $break-large) and (max-width: $break-large-right) { @content; }
	}
	@else if $media == tablet-portrait {
		@media only screen and (min-width: $break-large) and (max-width: $break-large-right2) and (orientation:portrait) { @content; }
	}
	@else if $media == tablet-landscape {
	  @media only screen and (min-width: $break-large) and (max-width: $break-large-right) and (orientation:landscape) { @content; }
	}
	@else if $media == desc {
		@media only screen and (min-width: $break-large-right + 1) { @content; }
	}
	@else if $media == wide-screen {
	  @media only screen and (min-width: $break-huge + 1) { @content; }
	}
	@else if $media == print {
		@media print { @content; }
	}
    @else if $media == laptop{
	  @media only screen and (min-width: $break-large-right2) and (max-height: $break-height) { @content; }
	}
    @else if $media == poly-menu-inline{
      @media only screen and (min-width: $break-small) and (max-width: $break-polytech) { @content; }
    }
    @else if $media == desk{
      @media only screen and (min-width: $break-large) and (max-width: $break-large-right) { @content }
    }
}

// retina bg
@mixin retina{
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
    @content;
  }
}
@mixin box-shadow($string){
  -moz-box-shadow:    $string;
  -webkit-box-shadow: $string;
  box-shadow:         $string;
}

// BACKGROUND SIZE
@mixin background-size($width: 100%, $height: 100%) {
     -moz-background-size: $width $height;
  -webkit-background-size: $width $height;
          background-size: $width $height;
}
// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
     -moz-transform: rotate($deg + deg);
       -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
      -ms-transform: rotate($deg + deg);
          transform: rotate($deg + deg);
             filter: progid:DXImageTransform.Microsoft.Matrix(
                     M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand');
               zoom: 1;
}

// TRANSITION
@mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
	-moz-transition:    $what $length $easing;
	-o-transition:      $what $length $easing;
	-webkit-transition: $what $length $easing;
	-ms-transition:     $what $length $easing;
	transition:         $what $length $easing;
}

// image replacement extend
@mixin hide-text{
  text-indent:-9999px;
  overflow: hidden;
  white-space: nowrap;
}
// %clr{
//   &:after{
//     content: ".";
//     display: block;
//     height: 0;
//     clear: both;
//     visibility: hidden;
//     }
// }
%clr{
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
	*zoom: 1;
}
// placeholder color
@mixin placeholder-color($color) {
	&.placeholder {
		color: $color;
	}
	&:-moz-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
}

%gray{
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); /* Firefox 10+ */
	filter: gray; /* IE6-9 */
	-webkit-filter: grayscale(100%); /* Chrome 19+ & Safari 6+ */
}
%gray-half{
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'saturate\' values=\'0.5\'/></filter></svg>#grayscale"); /* Firefox 10+ */
	filter: gray alpha(opacity=50); /* IE6-9 */
	-webkit-filter: grayscale(50%); /* Chrome 19+ & Safari 6+ */
}
%gray-zero{
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale");
	-webkit-filter: grayscale(0%);
}
@mixin unselectable() {
    -webkit-touch-callout : none;
    -webkit-user-select   : none;
    -khtml-user-select    : none;
    -moz-user-select      : none;
    -ms-user-select       : none;
    user-select           : none;
}
@mixin prevent-text(){
   -ms-word-break: break-all;
       word-break: break-all;
       word-break: break-word;
  -webkit-hyphens: auto;
     -moz-hyphens: auto;
          hyphens: auto;
}
@mixin selection {
	& ::selection {
		@content;
	}
	& ::-moz-selection {
		@content;
	}
}
// sized sprites
@mixin image-size($path){
	width: image-width($path);
	height: image-height($path);
}
@mixin sized-sprite($map, $sprite){
	background: sprite($map, $sprite) no-repeat;
	@include image-size(sprite-file($map, $sprite));
}

@mixin sized-sprite-2x($map, $sprite){
  background: sprite($map, $sprite) no-repeat;
  background-position: 0 round(nth(sprite-position($map, $sprite), 2) / 2);
  height: round(image-height(sprite-file($map, $sprite)) / 2);
  width: round(image-width(sprite-file($map, $sprite)) /2 );
  @include background-size(ceil(image-width(sprite-path($map)) / 2),ceil(image-height(sprite-path($map)) / 2));
}
@mixin border-box{
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
@mixin webkitappear{
	-webkit-appearance:none;
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}
@mixin prefixed-properties($capability, $threshold, $properties, $capability-options: $default-capability-options) {
  @include with-each-prefix($capability, $threshold, $capability-options) {
    @each $prop, $value in $properties {
      @include prefix-prop($prop, $value);
    }
  }
}
@mixin border-radius($val){
  -moz-border-radius: $val;
  -webkit-border-radius: $val;
  border-radius: $val;
}
@mixin border-top-left-radius($val){
  -moz-border-top-left-radius: $val;
  -webkit-border-top-left-radius: $val;
  border-top-left-radius: $val;
}
@mixin border-top-right-radius($val){
  -moz-border-top-right-radius: $val;
  -webkit-border-top-right-radius: $val;
  border-top-right-radius: $val;
}
@mixin border-bottom-left-radius($val){
  -moz-border-bottom-left-radius: $val;
  -webkit-border-bottom-left-radius: $val;
  border-bottom-left-radius: $val;
}
@mixin border-bottom-right-radius($val){
  -moz-border-bottom-right-radius: $val;
  -webkit-border-bottom-right-radius: $val;
  border-bottom-right-radius: $val;
}
@mixin scale($val){
  -moz-transform: scale($val);
  -ms-transform: scale($val);
  -webkit-transform: scale($val);
  -o-transform: scale($val);
  transform: scale($val);
}
@mixin rotate($val){
  -moz-transform: rotate($val);
  -ms-transform: rotate($val);
  -webkit-transform: rotate($val);
  -o-transform: rotate($val);
  transform: rotate($val);
}
@mixin opacity($val){
  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=$val);
  opacity: $val;
}
@mixin translate3d($translate-x: $default-translate-x, $translate-y: $default-translate-y, $translate-z: $default-translate-z, $perspective: false) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective {
    $trans: perspective($perspective) $trans;
  }
  @include transform3d($trans);
}
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

// no-padding mixin for bootstrap
@mixin no-padding($side) {
    @if $side == 'all' {
        .no-padding {
            padding: 0 !important;
        }
    } @else {
        .no-padding-#{$side} {
            padding-#{$side}: 0 !important;
        }
    }
}

@include no-padding("left");
@include no-padding("right");
@include no-padding("top");
@include no-padding("bottom");
@include no-padding("all");
